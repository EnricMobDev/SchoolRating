//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `school`.
    static let school = Rswift.ImageResource(bundle: R.hostingBundle, name: "school")
    
    /// `UIImage(named: "school", bundle: ..., traitCollection: ...)`
    static func school(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.school, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `DetailViewController`.
    static let detailViewController = _R.nib._DetailViewController()
    /// Nib `HomeViewController`.
    static let homeViewController = _R.nib._HomeViewController()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `SignUpViewController`.
    static let signUpViewController = _R.nib._SignUpViewController()
    /// Nib `TabBarViewController`.
    static let tabBarViewController = _R.nib._TabBarViewController()
    
    /// `UINib(name: "DetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailViewController) instead")
    static func detailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailViewController)
    }
    
    /// `UINib(name: "HomeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeViewController) instead")
    static func homeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeViewController)
    }
    
    /// `UINib(name: "LoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginViewController) instead")
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    
    /// `UINib(name: "SignUpViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signUpViewController) instead")
    static func signUpViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signUpViewController)
    }
    
    /// `UINib(name: "TabBarViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tabBarViewController) instead")
    static func tabBarViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tabBarViewController)
    }
    
    static func detailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func homeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeViewController? {
      return R.nib.homeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeViewController
    }
    
    static func loginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func signUpViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signUpViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func tabBarViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TabBarViewController? {
      return R.nib.tabBarViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TabBarViewController
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _LoginViewController.validate()
    }
    
    struct _DetailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HomeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeViewController
      }
      
      fileprivate init() {}
    }
    
    struct _LoginViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "school", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'school' is used in nib 'LoginViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SignUpViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SignUpViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TabBarViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TabBarViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TabBarViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TabBarViewController
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
