//
//  LaunchScreenInteractor.swift
//  GameOfThrones
//
//  Created by Enric Pou Villanueva on 31/05/2019.
//  Copyright (c) 2019 Enric Pou Villanueva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FetchFlightsProtocol: class {
    func listOf(fligths: [FlightsResponseModel])
//    func getAllFlights() -> [FlightsResponseModel]
}

class HomeViewControllerInteractor {
    
    // MARK: - Variables
    var dolarExchange: Double?
    var yenExchange: Double?
    var poundExchange: Double?
    weak var delegate: FetchFlightsProtocol?
    
    // MARK: - Constants
    let dispatchGroup = DispatchGroup()
    let repository: RepositoryProtocol
    
    init(repository: RepositoryProtocol) {
        self.repository = repository
    }
    
    func getAllFlights() {
        fetchExchangesWith(url: Constants.Networking.Url.dolar_url)
        fetchExchangesWith(url: Constants.Networking.Url.yen_url)
        fetchExchangesWith(url: Constants.Networking.Url.pound_url)
        
        fetchFlights()
    }
    
    // MARK: - Private funcs
    private func fetchExchangesWith(url: String) {
        
        dispatchGroup.enter()
        repository.getCurrencyExchange(withUrl: url) { [weak self] (exchange, error) in
            
            guard let self = self else { return }
            
            guard let acutalExchange = exchange?.exchangeRate else { return }
            
            if url.contains(Currency.usd.rawValue) {
                self.dolarExchange = acutalExchange
            }else if url.contains(Currency.jpy.rawValue) {
                self.yenExchange = acutalExchange
            }else if url.contains(Currency.gbp.rawValue) {
                self.poundExchange = acutalExchange
            }
            
            self.dispatchGroup.leave()
        }
    }
    
    private func fetchFlights() {
        dispatchGroup.notify(queue: .main) {
            
            self.repository.getFlights { [weak self] (flights, error)  in

                guard let self = self else { return }
                
                guard let flights = flights else { return }
                let flightResponseModel = self.bindServiceResponseToOur(model: flights)
                self.saveFligthsInToCache(flightResponseModel)
                
                self.delegate?.listOf(fligths: flightResponseModel)
            }
        }
    }
    
    private func bindServiceResponseToOur(model: FlightsResponse) -> [FlightsResponseModel] {
        
        var flightResponseModel: [FlightsResponseModel] = []
        
        for eachFligth in model.results {
            
            let currencyExchange = currencyExchangeWith(price: eachFligth.price, currency: eachFligth.currency.rawValue)
            let roundedPrice = rounded(price: currencyExchange)
            
            let fligth = FlightsResponseModel(inboundArrivalDate: eachFligth.inbound.arrivalDate,
                                              inboundArrivalTime: eachFligth.inbound.arrivalTime,
                                              inboundDepartureDate: eachFligth.inbound.departureDate,
                                              inboundDepartureTime: eachFligth.inbound.departureTime,
                                              inboundDestination: eachFligth.inbound.destination.rawValue,
                                              inboundOrigin: eachFligth.inbound.origin.rawValue,
                                              outboundArrivalDate: eachFligth.outbound.arrivalDate,
                                              outboundArrivalTime: eachFligth.outbound.arrivalTime,
                                              outboundDepartureDate: eachFligth.outbound.departureDate,
                                              outboundDepartureTime: eachFligth.outbound.departureTime,
                                              outbounddDestination: eachFligth.outbound.destination.rawValue,
                                              outboundOrigin: eachFligth.outbound.origin.rawValue,
                                              price: roundedPrice)
            
            flightResponseModel.append(fligth)
        }
        
        return flightResponseModel
    }
    
    private func currencyExchangeWith(price: Double, currency: String) -> Double {
        
        var convertedPrice = 0.0
        
        switch currency {
        case Currency.usd.rawValue:
            guard let dolarExchange = dolarExchange else { return convertedPrice }
            convertedPrice = (price * dolarExchange)
            
        case Currency.jpy.rawValue:
            guard let yenExchange = yenExchange else { return convertedPrice }
            convertedPrice = (price * yenExchange)
            
        case Currency.gbp.rawValue:
            guard let poundExchange = poundExchange else { return convertedPrice }
            convertedPrice = (price * poundExchange)
        case Currency.eur.rawValue:
            convertedPrice = price
        default:
            break
        }
        
        return convertedPrice
    }
    
    private func rounded(price: Double) -> String {
        return String(format: Constants.formatWithTwoDecimals, price).replacingOccurrences(of: ".", with: ",")
    }
    
    private func saveFligthsInToCache(_ flights: [FlightsResponseModel]) {
        FlightResponseManagerCache.shared.save(flights: flights)
    }
}
